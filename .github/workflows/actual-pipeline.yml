# pipeline.yml
name: Model Training and Aggregation Pipeline

on:
  push:
    branches:
      - master  # Trigger pipeline on push to 'main' branch

jobs:
  # Step 1: Get Latest Repository
  checkout:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # This is only for Cloud kubernetes services
      # - name: Set up Kubernetes context
      #   run: |
      #     echo $"{{ secrets.KUBE_CONFIG }}" > ~/.kube/config
      #     kubectl config view --raw   
      
  # Step 2: Create ConfigMap for scripts
  create-model-volume:
    runs-on: self-hosted
    needs: checkout  # This job runs after the setup job
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create PV and PVC for models 
        run: kubectl apply -f model/volume.yaml  

      # kubectl create configmap script-volume --from-file=script/ --dry-run=client -o yaml | kubectl apply -f -
      - name: Create ConfigMap for model training script (randomforest.py)
        run: |
          if (-not (kubectl get configmap script-volume -o name | Select-String "script-volume")) {
              kubectl create configmap script-volume --from-file=script/
          } else {
              Write-Output "ConfigMap 'script-volume' already exists. Skipping creation."
          }

  # Step 3: Function Testing
  function-testing:
    runs-on: self-hosted
    needs: create-model-volume
    steps:
      - name: Testing
        run: echo Testing

  # Step 4: Job 1 (Model Training)
  model-training:
    needs: function-testing  # This job runs after the Function Testing job
    runs-on: self-hosted
    steps:
      - name: Apply Job 1 (Model Training)
        run: kubectl apply -f ./model/training.yaml

      - name: Wait for Training Job to Complete
        run: |
          kubectl wait --for=condition=complete --timeout=600s job/model-training-job
        # This will wait until the job completes successfully, with a 10-minute timeout

  # Step 5: Job 2 (Model Aggregation [Testing and Uploading to Centralized Artifact])
  model-aggregation:
    needs: model-training  # This job runs after Job 1 finishes
    runs-on: self-hosted
    steps:
      - name: Apply Job 2 (Model Aggregation)
        run: kubectl apply -f ./model/aggregation.yaml

      - name: Waiting for testing and deployment
        run: |
          kubectl wait --for=condition=complete --timeout=600s job/model-aggregation-job
        # This will wait until the job completes successfully, with a 10-minute timeout

  # Step 6: Job 3 (Model Deployment [Model Prediction and Drift Prediction])
  model-deployment:
    needs: model-aggregation  # This job runs after Job 2 finishes
    runs-on: self-hosted
    steps:
      - name: Apply Job 3 (Model Deployment)
        run: kubectl apply -f ./deployment/kube-deployment.yaml

      - name: Apply service to forward port to localhost
        run: kubectl apply -f ./deployment/kube-service.yaml

  # Step 7: Job Cleanup to remove completed jobs, configmap, and pv/c
  job-cleanup:
    needs: model-deployment
    runs-on: self-hosted
    steps:
      - name: Delete model-training-job
        run: kubectl delete -f ./model/training.yaml

      - name: Delete model-aggregation-job
        run: kubectl delete -f ./model/aggregation.yaml
      
      - name: Delete model's volume
        run: kubectl delete -f ./model/volume.yaml

      - name: Delete script-volume (configmap)
        run: kubectl delete configmap script-volume

