# pipeline.yml
name: Model Training and Aggregation Pipeline

on:
  push:
    branches:
      - master  # Trigger pipeline on push to 'main' branch

jobs:
  # Step 1: Get Latest Repository
  setup:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # This is only for Cloud kubernetes services
      # - name: Set up Kubernetes context
      #   run: |
      #     echo $"{{ secrets.KUBE_CONFIG }}" > ~/.kube/config
      #     kubectl config view --raw   

      - name: Create PV and PVC for models 
        run: kubectl apply -f model/volume.yaml -n dev

      - name: Setup Kubernetes Secret for docker image pull
        run: |
          if (-not (kubectl get secret regcred -n dev -o name | Select-String "regcred")) {
            kubectl create secret docker-registry regcred `
              --docker-server=https://index.docker.io/v1/ `
              --docker-username=${{ secrets.DOCKER_USERNAME }} `
              --docker-password=${{ secrets.DOCKER_TOKEN }} `
              -n dev
          } else {
            Write-Output "Secret 'regcred' already exists. Skipping creation."
          }
      
      - name: Setup Kubernetes Secret for licensing
        run: | 
          if (-not (kubectl get secret postgres-secret -n dev -o name | Select-String "postgres-secret")) {
            kubectl create secret generic postgres-secret --from-literal=POSTGRES_TOKEN=${{ secrets.LICENSE_TOKEN }} -n dev
          } else {
            Write-Output "Secret 'postgres-secret' already exists. Skipping creation."
          }
      
      
#     # kubectl create configmap script-volume --from-file=script/ --dry-run=client -o yaml | kubectl apply -f -
#     - name: Create ConfigMap for model training script (randomforest.py)
#       run: |
#         if (-not (kubectl get configmap script-volume -o name | Select-String "script-volume")) {
#             kubectl create configmap script-volume --from-file=script/
#         } else {
#             Write-Output "ConfigMap 'script-volume' already exists. Skipping creation."
#         }

  # Step 2: Function Testing
  function-testing:
    runs-on: self-hosted
    needs: setup
    steps:
      - name: Testing
        run: echo Testing

  # Step 3: Job 1 (Model Training)
  model-training:
    needs: function-testing  # This job runs after the Function Testing job
    runs-on: self-hosted
    steps:
      - name: Apply Job 1 (Model Training)
        run: kubectl apply -f ./model/training.yaml

      - name: Wait for Training Job to Complete
        run: |
          kubectl wait --for=condition=complete --timeout=600s job/model-training-job -n dev
        # This will wait until the job completes successfully, with a 10-minute timeout

  # Step 4: Job 2 (Model Aggregation [Testing and Uploading to Centralized Artifact])
  model-aggregation:
    needs: model-training  # This job runs after Job 1 finishes
    runs-on: self-hosted
    steps:
      - name: Apply Job 2 (Model Aggregation)
        run: kubectl apply -f ./model/aggregation.yaml

      - name: Waiting for testing and deployment
        run: |
          kubectl wait --for=condition=complete --timeout=600s job/model-aggregation-job -n dev
        # This will wait until the job completes successfully, with a 10-minute timeout

  # Step 5: Job Cleanup to remove completed jobs, configmap, and pv/c
  job-cleanup:
    needs: model-aggregation
    runs-on: self-hosted
    steps:
      - name: Delete model-training-job
        run: kubectl delete -f ./model/training.yaml

      - name: Delete model-aggregation-job
        run: kubectl delete -f ./model/aggregation.yaml
      
      - name: Delete model's volume
        run: kubectl delete -f ./model/volume.yaml -n dev

      # - name: Delete script-volume (configmap)
      #   run: kubectl delete configmap script-volume

